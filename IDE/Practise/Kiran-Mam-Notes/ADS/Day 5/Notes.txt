-----------------------------------------
Day 5: Algorithms and Data Structures
Date : 29-March-2025
-----------------------------------------

Topics: 
	- LinkedList
	
	class Node{
		int data;
		Node next;
		Node(int d)
		{
			data = d;
			next = null;
		}
		
		
	}
	
	Operations:
----------------
	-Insertion : 3 methods
		-1. Insertion at the begining:
---------------------------------
			
		void insert(int new_data){
			Node new_node = new Node(new_data);
			new_node.next = start;
			start = new_node;
		}
				
		-2. Insertion in between 2 nodes
		-----------------------------------
			
		void inserAfter(Node prev_node, int new_data){
			
			Node new_node = new Node(new_data);
			new_node.next = prev_node.next;
			pre_node.next = new_node;
			
		}
				
		-3. Insertion at the end
	-----------------------------	
		
		
		void append(int new_data){
		
			Node new_node = new Node(new_data);
			if(start == null)
			{
				start = new Node(new_data);// first node in the list
				return;
			}
			Node n = start;
			while(n.next != null)
				n=n.next;
			n.next = new_node;
			return;
				
		}
			
		
	-Deletion:
--------------
		-1. Deletion at the begining
		-2. Deletion in between 2 nodes
		-3. Deletion at the end
		
				
		void deleteNode(int key){
						
			Node temp = head, prev = null;
				if(temp != null && temp.data == key){
				head = temp.next;//Deletion at begining: First node deleted
				return;
				
			}
			while( temp != null && temp.data != key){
				prev = temp;
				temp = temp.next
				
			}
			if(temp == null)
				return;
			prev.next = temp.next;
						
		}
		
				
		
		-4. Deletion at particular position
-----------------------------------------

	void deleteNode(int position) {
		if (head == null)
			return;
		Node temp = head;
		if (position == 0) {
			head = temp.next; // Change head
			return;
		}

		for (int i = 0; temp != null && i < position - 1; i++)
			temp = temp.next;
		if (temp == null || temp.next == null)
			return;
		Node next = temp.next.next;
		temp.next = next;
	}

	public void display() {
		Node tnode = head;
		while (tnode != null) {
			System.out.print(tnode.data + " ");
			tnode = tnode.next;
		}
	}

	

	
	WAF to delete linked list:
	---------------------------
	 start = null;
	 
	 
	  
	WAF to count the number of nodes in LL:
	----------------------------------------
	
	int count(){
		Node temp = head;
		int c = 0;
		while(temp != null){
			c++;
			temp = temp.next;
		}
		return c;
		
	}
	
	WA recursive F to count the number of nodes in LL:
	--------------------------------------------------
	
	int countR(Node head){
		Node temp = head;
		if(temp == null)
			return 0;
		return 1+countR(temp.next);
	}
	
	
	WAF toto search a node in given LL:
	-----------------------------------
	
	boolean search(Node head, int x)
	{
		Node temp = head;
		while(temp != null)
		{
			if(temp.data == x)
				return true;
			temp = temp.next;
		}
		return false;
	}
	
	
	WAF to revers the linked list:
	------------------------------
	
	Node reverseLL(Node head){
		
		Node prev = null;
		Node current = head;
		Node next = null;
		while( current != null)
		{
			next = current.next;
			current.next = prev;
			prev = current;
			current = next;
			
		}
		current = prev;
		return current;
	}
