-----------------------------------------
Day 3: Programming Concepts of Java
Date : 05-March-2025
-----------------------------------------
Topics: 
	-Java Tokens
	-Operators
	-Separators
	-Command Line arguments
	-User Input
	-Decision Making
	-Loops
	
	
Java Tokens:
------------
Tokens are the smallest units in a Java program. Java has the following types of tokens:

  1.1 Keywords:
  ---------------
- Reserved words used by Java.
- Cannot be used as identifiers.
  
Example: `class, static, int, float, if, else, return, while`

class Example {
    public static void main(String[] args) {
        int num = 10;  // 'int' is a keyword
        System.out.println(num);
    }
}


---

  1.2 Identifiers:
  --------------------
- Names used for variables, methods, classes, objects.
- Must start with a letter (A-Z or a-z) or `_`, `$`.
- Cannot be a keyword.

Example:

int count = 5;   // Valid identifier
String $name = "John"; // Valid identifier
int 2num = 10;   // Invalid identifier (Cannot start with a number)


---

  1.3 Literals:
  -----------------
- Constant values assigned to variables.

Example:
java
int a = 100;       // Integer literal
double pi = 3.14;  // Floating-point literal
char c = 'A';      // Character literal
boolean flag = true; // Boolean literal
String str = "Java"; // String literal


---

  1.4 Operators:
  ---------------
- Symbols used for operations like addition, subtraction, comparison, etc.
- Types: Arithmetic, Relational, Logical, Bitwise, Assignment.


int sum = 5 + 3; // + is an operator
boolean isTrue = (sum > 5); // > is an operator


---

  1.5 Separators:
  -----------------
- Used to structure the code.

 `{}` 	: Block of code 		
 `()` 	: Method parameters 	
 `[]` 	: arrayy declaration 		
 `;`   : End of statement		
 `,` 	:| Multiple declarations 
 `.` 	: Access members 		

---
 Operators :
 ------------
-Operators in Java are special symbols that perform operations on variables and values. Java provides several types of operators, categorized based on functionality.

---

Arithmetic Operators:
------------------------
- Used for mathematical calculations.

 Syntax

result = operand1 operator operand2;

 Example:

public class ArithmeticOperators {
    public static void main(String[] args) {
        int a = 10, b = 5;
        System.out.println("Addition: " + (a + b));
        System.out.println("Subtraction: " + (a - b));
        System.out.println("Multiplication: " + (a * b));
        System.out.println("Division: " + (a / b));
        System.out.println("Modulus: " + (a % b));
    }
}


---

Relational (Comparison) Operators:
-------------------------------------
- Used to compare two values and return a boolean (`true` or `false`).

 Syntax

result = operand1 operator operand2;


 Example 

public class RelationalOperators {
    public static void main(String[] args) {
        int x = 10, y = 5;
        System.out.println("Equal: " + (x == y));
        System.out.println("Not Equal: " + (x != y));
        System.out.println("Greater than: " + (x > y));
        System.out.println("Less than: " + (x < y));
        System.out.println("Greater or Equal: " + (x >= y));
        System.out.println("Less or Equal: " + (x <= y));
    }
}


---

Logical Operators:
---------------------
- Used for boolean (true/false) logic.

 Syntax
java
result = operand1 operator operand2;


Example 

public class LogicalOperators {
    public static void main(String[] args) {
        boolean a = true, b = false;
        System.out.println("AND (&&): " + (a && b));
        System.out.println("OR (||): " + (a || b));
        System.out.println("NOT (!a): " + (!a));
    }
}


---
Assignment Operators:
--------------------------
- Used to assign values to variables.

 Syntax

variable operator= value;


 Example Program
java
public class AssignmentOperators {
    public static void main(String[] args) {
        int x = 10;
        x += 5;  // x = x + 5
        System.out.println("After +=: " + x);
        x -= 3;  // x = x - 3
        System.out.println("After -=: " + x);
        x *= 2;  // x = x * 2
        System.out.println("After *=: " + x);
    }
}

Bitwise Operators:
-----------------------
- Work at the bit level and are used for efficient computations.

 Example 

public class BitwiseOperators {
    public static void main(String[] args) {
        int a = 5, b = 3;
        System.out.println("AND (&): " + (a & b));
        System.out.println("OR (|): " + (a | b));
        System.out.println("XOR (^): " + (a ^ b));
        System.out.println("NOT (~a): " + (~a));
        System.out.println("Left Shift (<<): " + (a << 1));
        System.out.println("Right Shift (>>): " + (a >> 1));
    }
}

---

Bitwise Shift Operators in Java:
----------------------------------- 
-Bitwise shift operators in Java are used to manipulate individual bits of an integer value. 
-They work by shifting the bits of an operand left or right, filling the vacated bits with zeros or sign bits.

---

Types of Bitwise Shift Operators:
------------------------------------
Java provides three types of bitwise shift operators:

1. `<<` (Left Shift) :
2. `>>` (Right Shift) :
3.  `>>>` (Unsigned Right Shift) :

---

Left Shift Operator (`<<`):
-------------------------------
- Moves all bits of a number to the left by the specified number of places.
- Each shift doubles the value (`x << 1` is equivalent to `x * 2`).
- Vacant positions are filled with `0`.

 Syntax:

result = number << shift_count;


 Example:

public class LeftShiftExample {
    public static void main(String[] args) {
        int num = 5;  // Binary: 0000 0101
        int result = num << 2;  // Left shift by 2 places

        System.out.println("Original number: " + num);      // Output: 5
        System.out.println("After left shift: " + result);  // Output: 20
    }
}


 Explanation:
- `5` in binary → `0000 0101`
- `5 << 2` shifts bits two places left → `0001 0100`
- Result: `20`

---

 Right Shift Operator (`>>`):
 -----------------------------
- Moves bits to the right, preserving the sign bit (MSB).
- Each shift divides the value by `2` (`x >> 1` is equivalent to `x / 2`).
- Vacant positions are filled with `1` if the number is negative (sign extension).

 Syntax:

result = number >> shift_count;


 Example:

public class RightShiftExample {
    public static void main(String[] args) {
        int num = 20;  // Binary: 0001 0100
        int result = num >> 2;  // Right shift by 2 places

        System.out.println("Original number: " + num);      // Output: 20
        System.out.println("After right shift: " + result); // Output: 5
    }
}


 Explanation:
- `20` in binary → `0001 0100`
- `20 >> 2` shifts bits two places right → `0000 0101`
- Result: `5`

 Example with Negative Numbers:
 -------------------------------

public class RightShiftNegativeExample {
    public static void main(String[] args) {
        int num = -20;  // Binary: 1110 1100 (for negative representation)
        int result = num >> 2;  // Right shift by 2 places

        System.out.println("Original number: " + num);
        System.out.println("After right shift: " + result);
    }
}

 Explanation:
- `-20` in binary (32-bit) → `1111 1111 1111 1111 1111 1111 1110 1100`
- `-20 >> 2` → `1111 1111 1111 1111 1111 1111 1111 1011` (Preserves sign)
- Result: `-5` (sign bit is preserved)

---

Unsigned Right Shift Operator (`>>>`):
----------------------------------------
- Moves bits to the right, but always fills with zeros (ignores sign).
- Used only for non-negative shifting operations.

 Syntax:

result = number >>> shift_count;


 Example:

public class UnsignedRightShiftExample {
    public static void main(String[] args) {
        int num = -20;  // Negative number
        int result = num >>> 2;  // Unsigned right shift by 2 places

        System.out.println("Original number: " + num);
        System.out.println("After unsigned right shift: " + result);
    }
}


 Explanation:
- `-20` in binary (32-bit) → `1111 1111 1111 1111 1111 1111 1110 1100`
- `-20 >>> 2` → `0011 1111 1111 1111 1111 1111 1111 1011` (Fills with zeros)
- Result: `1073741819` (Huge positive number)

---
Ternary Operator (`?:`):
--------------------------
- Shorthand for `if-else`.

Syntax

result = (condition) ? value_if_true : value_if_false;


 Example

public class TernaryOperator {
    public static void main(String[] args) {
        int num = 10;
        String result = (num % 2 == 0) ? "Even" : "Odd";
        System.out.println("Number is: " + result);
    }
}


---

 Real-Time Example:
 
public class DiscountCalculator {
    public static void main(String[] args) {
        double price = 1200;
        double discount = (price > 1000) ? price * 0.10 : price * 0.05;
        System.out.println("Discount: " + discount);
    }
}

---
Loops (For, While, Do-While):
-----------------------------
java
// For loop
for (int i = 1; i <= 5; i++) {
    System.out.println(i);
}

// While loop
int j = 1;
while (j <= 5) {
    System.out.println(j);
    j++;
}

// Do-While loop
int k = 1;
do {
    System.out.println(k);
    k++;
} while (k <= 5);

