CONSTRAINTS:-

- Limitations/restrictions imposed on a table.






	EMP
PK
Empno	Ename	SAL	Deptno

1	A	5000	1
2	A	6000	1
3	C	7000	1
4	D	9000	2
E	5	8000	2



-------------------------------------------------------------------
* PRIMARY KEY:-
-------------------------------------------------------------------


	- key is another word fir column
	- primary column
	- column or set of column that uniquely identifies a row
	- Duplicate values are not allowed
	- Null values are not allowed, this is an mandatory column
	- Its recommended that every table should have a primary key, it helps from a long term perspective
	- purpose of primary key is row uniqueness, with the help of primary key column you can distinguish between 2 rows of a table
	- Text and Blob cannot be Primary key
	- Your primary key columns is the best column to search something.
	- Therefore, Unique index is automatically created for Primary key column.
	- YOU CAN HAVE ONLY ONE PRIMARY KEY PER TABLE


	
-------------------------------------------------------------------
* COMPOSITE PRIMARY KEY :-
 -------------------------------------------------------------------


	- combine 2 or more columns together to serve the purpose of primary key, preferably they should be inter-dependent columns.
	- In MySQL, Maximum u can combine up to 32 columns in a composite primary key.
	- If u have a composite primary key, then a composite Unique Index is automatically created.
	- YOU CAN HAVE ONLY ONE PRIMARY KEY PER TABLE

	- mysql> create table emp1
		(
		empno char(4) ,
		ename varchar(25),
		sal float,               <-- Composite primary key
		deptno int,
		primary key(deptno, empno)
		);


	- mysql>  other way find nd write


-------------------------------------------------------------------
* CANDIDATE KEY :-
-------------------------------------------------------------------

	- Is not a constraint
	- is a definition
	- is a column that is primary key in waiting
	- beside a primary key any other column in the table that could also serve the purpose of primary key, is known as candidate key.

	- Steps to identify candidate key -->
	1. Identify some key column and make it the primary key of your table.
	2. If you cannot identify some key column, then try to implement composite primary key.
	3. If this is not possible, then u add an extra column to the table to serve the purpose of Primary key.


-------------------------------------------------------------------
* SURROGATE KEY:-
-------------------------------------------------------------------


	- is not a constraint, is a definition.
	- when an extra column to the tale to serve the purpose of primary key, then such a primary key is known as Surrogate key.
	- Primary key is the best col to searching, and with CHAR datatype the searching and retrieval is very fast,  therefore for Surrogate key the char 	  datatype is recommended.





	create table emp1
	(
	empno char(4) primary key,
	ename varchar(25),
	sal float,
	deptno int
	);


	

* All constraints are at server level, you can perform the DML  operations using MySQL command line client, or MySQL workbench or Java, Ms .NET, etc.,
  or another front-end s/w , the constraints will always be valid (this feature is known as DATA INTEGRITY).



**	select * from information_schema.table_constraints;
	

	select * from information_schema.table_constraints
	where table_schema = 'cdacmumbai';

	select * from information_schema.key_column_usage
	where table_name = 'emp';


	
* To drop primary key:-

	- alter table emp drop primary key;

* To add primary key to existing table:-
	- alter table emp add primary key(empno);

* To change primary key column:-
	- drop the existing primary key constraints & alter table & then we can add new primary key constraints.




* Constraints are of 2 types:-

	a. column level constraints
		- constraints specified on one column

	b. Table level constraints
		- composite
		- constraint specified on combination of 2 or more columns
		- has to be specified at the end of the table structure






* NOT NULL CONSTRAINTS:-

	-  null values are not allowed
	- duplicate values are allowed
	- always a column level constraint
	- 


	create table emp1
	(
	empno char(4),
	ename varchar(25) not null,
	sal float not null,
	deptno int
	);




* Entity Integrity -> Primary key
* Referential Integrity -> Foreign key
* Domain Integrity -> Datatype, e.g.. int, char(10), etc.



* In MySQL, nullability is a part of the datatype

* To see the not null columns:-
	- decs emp;


* To drop not null constraint:-
	-alter table emp modify ename varchar(25) null;

* To add the not null constraint to existing table:-
	- alter table emp modify ename varchar(25) not null;





-------------------------------------------------------------------
* UNIQUE :-
-------------------------------------------------------------------

	- duplicate values are not allowed
	- Null values are allowed
	- can insert any number of null values, but no duplicate values.
	- Unique index is automatically created.
	- text and blob cannot be unique
	- In MySQL, you can combine up to 32 columns in a composite unique
	- YOU CAN HAVE ANY NUMBER OF UNIQUE CONSTRAINTS PER TABLE, UNLIKE PRIMARY KEY.

	-  create table emp1
	(
	empno char(4),
	ename varchar(25),
	sal float not null,
	deptno int,
	mob_no char(15) unique,
	unique(deptno, empmo)
	);



* Unique constraint is also an indexmso to drop it:-

    - drop index mob_no on emp;
    - drop index deptno on emp;

To add unique constraint to an existing table:-

    	- alter table emp add constraint u_emp_mob_no unique(mob_no);
	

constraint u_emp_mob_no -> constraint constraintname
constraint u_emo_mob_no -> optional


	select * from information_schema.table_constraints;
	

	select * from information_schema.table_constraints
	where table_schema = 'cdacmumbai';

	select * from information_schema.key_column_usage
	where table_name = 'emp';





* Column level constraint can be specified at table level (end of structure), but a table level composite constraint can never be specified at column level.

* Most developers prefer this, it makes the CREATE table command more readable.

* Column level constraint can be specified at table level (end of structure), except for the NOT NULL constraint which is always a column level constraint  and therefore the syntax will not support you from specifying at table level.



*	1 column can have more than 1 constraint
	e.g.
	    	- primary key and foreign key
		- not null and unique


* Solution for candidate key :-

	-not null constraint + unique index
			OR
	- not null constraint + unique constraint


* with the  help of above logic, indirectly u can have multiple primary keys in the table, one directly, the remaining indirectly.





ALTERNATE KEY -> Is not a constraint
		- is a definition
		- for the candidate key column, if u give it a not null constraint + unique index/constraint , then it becomes as alternative to primary key, then such a candidate key column is known is known as alternate key 



SUPER KEY -> 



-------------------------------------------------------------------
* FOREIGN KEY:-
~~~~~~~~~~~~~~~~~-------------------------------------------------

	- foreign column ( column the is coming/derived from else where)
	- Column or set of columns that references a column or set of columns of some table
	- Foreign key constraint is specified on the child column ( not the parent column )
	- Parent column has to be primary key or unique ( this is a pre- requisite for foreign key )
	- Foreign key will allow duplicate values 
	- Foreign key will allow null values also
	- Foreign key may reference column of the same table also ( known as self- referencing ) ( parent column and child )



         
              EMP
  ________________________________
  |		                 |
  pk			  (FK)   fk
EMPNO	ENAME	SAL	DEPTNO	MGR	// deptno -> child

1	A	5000	1	1
2	B	600	1	1
3	C	7000	1	1
4	D	9000	2	2
5	E	8000	2	2
6	F	9000	2	2
  _____<________________|
  |	
  |	DEPT
PK/UIQ
DEPTNO	DNAME	LOC		// deptno -> parent
1	TRN	BBY
2	EXP	DLH
3	MKTG	CAL




create table emp
(
empno char(4) primary key,
ename varchar(25),
sal float,
deptno int,
mgr char(4),
constraint fk_emp_deptno foreign key(deptno)
reference dept(deptno),
constraint fk_emp_mgr foreigh key(mgr)
reference emp(empno)
);


constraint fk_emp_deptno -> optional
constraint fk_emp_mgr    -> optional


	select * from information_schema.table_constraints;
	

	select * from information_schema.table_constraints
	where table_schema = 'cdacmumbai';

	select * from information_schema.key_column_usage
	where table_name = 'emp';


	alter table emp drop foreign key fk_emp_deptno;

	alter table add foreign key(deptno) references dept(deptno);


To disable the foreign key constraint:-
	- 


* For current connection:-
	- set foreign_key_checks = 0;
 	- set foreign_key_checks = 1;


* For all connections:-
	- set global foreign_key_checks = 0;
	- set global foreign_key_checks = 1;




* on delete cascade -> if u delete the parent row, then MySQL will automatically delete the child rows also


	delete from dept where deptno = 2;


* To retain the child :-

	update emp set deptno = null where deptno =2;

	delete from dept where deptno = 2;



* on update cascade -?

	- If u update the parent column, then MySQL will auto update the child rows also

	update dept set deptno = 4 where deptno = 2;




.........................................................


         
              EMP
  _____<__________________________
  |		                 |
  pk			  (FK)   fk
EMPNO	ENAME	SAL	DEPTNO	MGR	// deptno -> child

1	A	5000	1	1
2	B	600	1	1
3	C	7000	1	1
4	D	9000	2	2
5	E	8000	2	2
6	F	9000	2	2


* first it inserts, then it checks for the constraints, and it will allow
* constraint is deferred, post-insert
* SS LIYA HIA BAKI KA


new,

	delete from emp where empno = 1;
* avoid on delete cascade in the event of self-referencing , u may delete more rows than expected





*CHECK:-
--------------------------------

	- used for validation ( used for checking purposes)
	- e.g. sal < 10000, age > 25
	- Default is not a constraint
	- Default is a clause that u can use with CREATE TABLE;
	- if u enter some value, then it will take that value ;
	- if nothing is specified then , then it will take default value
	-


create table emp
(
    empno int auto_increment primary key,
    ename varchar(25) check(ename = upper(ename)),
    sal float default 7000
    check(sal between 5001 and 2999999),    <- column level
    deptno int reference dept(deptno),
    status char(1) default 'T'
    check(status in('T','P','R')),         <- column level
    comm float not null,
    mob_no char(15) unique,
    check(sal+comm < 5000000)              <- table level
);



* To make use of DEFAULT and AUTO_INCREMENT , use the following insert statements.

	- insert into emp( empname, deptno, comm, mob_no )
	  values (.....................);

*	AUTO_INCREMENT -> by default is starts from 1, by default it increments by 1.







































-----------------------------------------------------------------
VIEW
-----------------------------------------------------------------



	- present in all RDBMS and some of the DBMS.
	- view is handle to a table
	- stores the address
	-
	-






COMMAND:-

	mysql> create view viewname .....; 


amit_mysql> create view v1 AS select empno , ename from emp;

- view created



