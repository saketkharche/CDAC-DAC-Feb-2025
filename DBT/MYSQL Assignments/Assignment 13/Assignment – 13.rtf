{\rtf1\ansi\uc0\deflang16393{\fonttbl{\f0\fcharset0 Arial;}{\f1\fcharset0 Hack Nerd Font Mono;}{\f2\fcharset0 Times New Roman;}}{\colortbl;\red0\green0\blue0;}{\stylesheet{\snext0\f0\fs22\fi0\li0\ri0\ql\widctlpar{\*\stloverrides\f0\fs22\widctlpar} Normal;}{\s1\sbasedon0\snext0\f0\fs28\b\kerning28\fi0\li0\ri0\ql\keepn\widctlpar\sb240\sa60{\*\stloverrides\fs28\b\kerning28\keepn\sb240\sa60\outlinelevel0} heading 1;}{\s2\sbasedon0\snext0\f0\fs24\b\i\fi0\li0\ri0\ql\keepn\widctlpar\sb240\sa60{\*\stloverrides\fs24\b\i\keepn\sb240\sa60\outlinelevel1} heading 2;}{\s3\sbasedon0\snext0\f0\fs22\b\fi0\li0\ri0\ql\keepn\widctlpar\sb240\sa60{\*\stloverrides\b\keepn\sb240\sa60\outlinelevel2} heading 3;}{\*\cs4\additive Default Paragraph Font;}{\*\cs5\additive\sbasedon4\super Footnote Reference;}{\*\cs6\additive\sbasedon4\super Endnote Reference;}}{\*\listtable}{\*\listoverridetable}{\*\generator Atlantis Word Processor 4.4.5.0;}{\info{\operator saket}{\creatim\yr2025\mo4\dy15\hr23\min36\sec24}{\revtim\yr2025\mo4\dy15\hr23\min38\sec49}{\author saket}{\nofcharsws2663}{\nofchars3913}{\nofwords489}{\nofpages3}{\version1}}\htmautsp\useltbaln\alntblind\ftnbj\ftnnar\aenddoc\aftnnrlc\paperw12240\paperh15840\margl1440\margr1440\margt1440\margb1440\endnhere\pgndec\pgncont\sftnbj\sftnstart1\sftnrstcont\sftnnar\saftnstart1\saftnrstcont\saftnnrlc\sectfullsaved\fet0\pard\plain\f2\fs24\qc\keepn\nowidctlpar\widctlpar\sb240\sa60\s1\f0\fs28\b\kerning28\lang1033 Assignment \u8211  13\Using the UNION clause.\\pard\nowidctlpar\widctlpar\f1\fs24\b0\kerning0 1) Create a union of two queries that shows the names, cities, and ratings of all\customers. Those with rating of 200 or greater will also have the words “High\Rating”, while the others will have the words “Low Rating”.\\pard\fs23\b\cf1 ANSWER÷\\nowidctlpar\widctlpar\fs24\b0\cf0 mysql> SELECT Cname, City, Rating, 'High Rating' AS Rating_Status\    -> FROM customers\    -> WHERE Rating >= 200\    -> UNION\    -> SELECT Cname, City, Rating, 'Low Rating' AS Rating_Status\    -> FROM customers\    -> WHERE Rating < 200;\+------------+-------------+--------+---------------+\| Cname      | City        | Rating | Rating_Status |\+------------+-------------+--------+---------------+\| Giovanni   | Rome        |    200 | High Rating   |\| Liu        | San Jose    |    200 | High Rating   |\| Grass      | Berlin      |    300 | High Rating   |\| Cisneros   | San Jose    |    300 | High Rating   |\| Bob        | London      |    200 | High Rating   |\| Carol      | Paris       |    300 | High Rating   |\| Eve        | Berlin      |    250 | High Rating   |\| Cisneros   | New York    |      5 | Low Rating    |\| Serres     | London      |      4 | Low Rating    |\| Brown      | Chicago     |      3 | Low Rating    |\| Johnson    | London      |      4 | Low Rating    |\| Williams   | Paris       |      6 | Low Rating    |\| Davis      | London      |      5 | Low Rating    |\| John Doe   | New York    |      5 | Low Rating    |\| Jane Smith | Chicago     |      4 | Low Rating    |\| Sam Brown  | Los Angeles |      3 | Low Rating    |\| Lucy Green | Chicago     |      5 | Low Rating    |\| Smith      | London      |      3 | Low Rating    |\| Johnson    | Paris       |      4 | Low Rating    |\| Williams   | London      |      5 | Low Rating    |\| Brown      | New York    |      2 | Low Rating    |\| Taylor     | Berlin      |      6 | Low Rating    |\| Alice      | London      |      5 | Low Rating    |\| Bob        | London      |      4 | Low Rating    |\| Charlie    | Paris       |      3 | Low Rating    |\| Hoffman    | London      |    100 | Low Rating    |\| Clemens    | London      |    100 | Low Rating    |\| Pereira    | Rome        |    100 | Low Rating    |\| Alice      | New York    |    100 | Low Rating    |\| Dan        | Rome        |    150 | Low Rating    |\+------------+-------------+--------+---------------+\30 rows in set (0.00 sec)\\2) Write a command that produces the name and number of each salesperson and\each customer with more than one current order. Put the results in alphabetical order.\\pard\fs23\b\cf1 ANSWER÷\\nowidctlpar\widctlpar\fs24\b0\cf0 mysql> SELECT s.Sname AS Name, s.Snum AS Number\    -> FROM salespeople s\    -> JOIN orders o ON s.Snum = o.Snum\    -> GROUP BY s.Snum\    -> HAVING COUNT(o.Onum) > 1\    -> UNION\    -> SELECT c.Cname AS Name, c.Cnum AS Number\    -> FROM customers c\    -> JOIN orders o ON c.Cnum = o.Cnum\    -> GROUP BY c.Cnum\    -> HAVING COUNT(o.Onum) > 1\    -> ORDER BY Name;\+----------+--------+\| Name     | Number |\+----------+--------+\| Alice    |      2 |\| Bob      |      3 |\| Cisneros |   2008 |\| Clemens  |   2006 |\| Grass    |   2004 |\| John     |      1 |\| John Doe |    204 |\| Peel     |   1001 |\| Rifkin   |   1007 |\| Serres   |   1002 |\+----------+--------+\10 rows in set (0.00 sec)\\3) Form a union of three queries. Have the first select the snums of all salespeople in San Jose; the second, the cnums of all customers in San Jose; and the third the onums of all orders on October 3. Retain duplicates between the last two queries but eliminate any redundancies between either of them and the first.\(Note: in the sample tables as given, there would be no such redundancy. This is besides the point.)\\pard\fs23\b\cf1 ANSWER÷\\nowidctlpar\widctlpar\fs24\b0\cf0 mysql> SELECT Snum\    -> FROM salespeople\    -> WHERE City = 'San Jose'\    -> UNION\    -> SELECT Cnum\    -> FROM customers\    -> WHERE City = 'San Jose'\    -> UNION ALL\    -> SELECT Onum\    -> FROM orders\    -> WHERE Odate = '2024-10-03';\+------+\| Snum |\+------+\| 1002 |\| 2003 |\| 2008 |\+------+\3 rows in set (0.00 sec)\\lang16393\}